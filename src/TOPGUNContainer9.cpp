/*
* ============================================================================
*  Name     : CTOPGUNContainer9 from TOPGUNContainer9.h
*  Part of  : TOPGUN
*  Created  : 5/9/2004 by pawel@wapice.com
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  :
*  Copyright: P&P
* ============================================================================
*/

// INCLUDE FILES
//system
#include <eikenv.h> 
//bitmaps
#include <topgun.mbg>
// for double screen buffering  
#include <fbs.h>	
#include <bitdev.h>
#include <bitstd.h>
// for fonts
#include <gdi.h> 
#include <aknutils.h>
//commands
#include <TOPGUN.rsg>
#include "topgun.hrh"
//user
#include "bitmapmethods.h"
#include "TOPGUNContainer9.h"
#include "TOPGUNView9.h"
#include "TOPGUNDocument.h"
#include "HighScore.h"
#include "LevelLoader.h"
//sound
#include "CSndMixer.h"
#include "CWavLoader.h" 

//CONSTANTS
_LIT (KMultiBitmapFilename,"z:\\resource\\apps\\topgun.mbm"); 
// ================= MEMBER FUNCTIONS =======================


CTOPGUNContainer9::CTOPGUNContainer9(CLevelLoader& aLevelLoader,
									 CTOPGUNDocument& aDocument,
									 CTOPGUNView9& aView):
	iLevelLoader(aLevelLoader),
    iDocument(aDocument),
	iView(aView),
	iEnterHighScore(EFalse),
	iLetter(0),
	iPos(0),
	iFirstLetter(0),
	iSecondLetter(0),
	iThirdLetter(0),
	iSelectPos(0)
	{
	}

// ---------------------------------------------------------
// CTOPGUNContainer9::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CTOPGUNContainer9::ConstructL(const TRect& aRect)
    {
	if (iLevelLoader.GetEnterHighScore())
		{
		if (iDocument.CheckHighScore((TUint)iLevelLoader.GetScore()))
			{
			iLevelLoader.EnterHighScore(EFalse);
			iEnterHighScore = ETrue;
			}
		}
	//initial settings of the screen
    CreateWindowL();
	SetRect(aRect);
	iBackgroundImage = iEikonEnv->CreateBitmapL(KMultiBitmapFilename,EMbmTopgunHighscore);	
	// Create the off screen bitmap and device / gc
    iOffScreenBitmap       = NBitmapMethods::CreateBitmapL(Rect().Size(),KColourDepth);
    iOffScreenBitmapDevice = NBitmapMethods::CreateBitmapDeviceL(*iOffScreenBitmap);
    iOffScreenBitmapGc     = NBitmapMethods::CreateGraphicsContextL(*iOffScreenBitmapDevice);
    ActivateL();
    }

// Destructor
CTOPGUNContainer9::~CTOPGUNContainer9()
    {
	if (iOffScreenBitmapGc)
		{
		delete iOffScreenBitmapGc;
		iOffScreenBitmapGc = NULL;
		}

	if (iOffScreenBitmapDevice)
		{
		delete iOffScreenBitmapDevice;
		iOffScreenBitmapDevice = NULL;
		}	
	
	if (iOffScreenBitmap)
		{
		delete iOffScreenBitmap;
		iOffScreenBitmap = NULL;
		}

	if (iBackgroundImage)
		{
		delete iBackgroundImage;
		iBackgroundImage = NULL;
		}
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CTOPGUNContainer9::SizeChanged()
    {
    // TODO: Add here control resize code etc.
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CTOPGUNContainer9::CountComponentControls() const
    {
    return 0; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::SetSecondLetter(const TUint aNum)
// ---------------------------------------------------------
//
void CTOPGUNContainer9::SetSecondLetter(const TUint aNum)
    {
    iSecondLetter = aNum;
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::SetThirdLetter(const TUint aNum)
// ---------------------------------------------------------
//
void CTOPGUNContainer9::SetThirdLetter(const TUint aNum)
    {
    iThirdLetter = aNum;
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::NextLetter()
// ---------------------------------------------------------
//
void CTOPGUNContainer9::NextLetter()
    {
	if (iPos < 2)
		{
		iPos++;
		}
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::PreviousLetter()
// ---------------------------------------------------------
//
void CTOPGUNContainer9::PreviousLetter()
    {
    if ( 0 < iPos)
		{
		iPos--;
		}
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CTOPGUNContainer9::ComponentControl(TInt /*aIndex*/) const
    {
	return NULL;
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CTOPGUNContainer9::Draw(const TRect& /*aRect*/) const
    {
    //SystemGc().Clear(Rect());
	iOffScreenBitmapGc->BitBlt(TPoint(0,0),iBackgroundImage);
	DrawCaptions();
	SystemGc().BitBlt(Rect().iTl,iOffScreenBitmap);
    }

// ---------------------------------------------------------
// CTOPGUNContainer9::::DrawCaptions() const
// ---------------------------------------------------------
//
void CTOPGUNContainer9::DrawCaptions() const
    {
	TChar player[26] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
               
	TBuf<3> first = *(iDocument.HighScoreItem(0))->PlayerName();
	TBuf<3> second = *(iDocument.HighScoreItem(1))->PlayerName();
	TBuf<3> third = *(iDocument.HighScoreItem(2))->PlayerName();
	TBuf<3> fourth = *(iDocument.HighScoreItem(3))->PlayerName();
	TBuf<3> fifth = *(iDocument.HighScoreItem(4))->PlayerName();
	
	
	TBuf<16> firstHS ;
	TBuf<16> secondHS;
	TBuf<16> thirdHS;
	TBuf<16> fourthHS;
	TBuf<16> fifthHS;

	firstHS.AppendFormat(_L("%d"),(iDocument.HighScoreItem(0))->HighScore());
	secondHS.AppendFormat(_L("%d"),(iDocument.HighScoreItem(1))->HighScore());
	thirdHS.AppendFormat(_L("%d"),(iDocument.HighScoreItem(2))->HighScore());
	fourthHS.AppendFormat(_L("%d"),(iDocument.HighScoreItem(3))->HighScore());
	fifthHS.AppendFormat(_L("%d"),(iDocument.HighScoreItem(4))->HighScore());

	TRgb active(0,0,0);
	TRgb inactive(111,110,108);

	TPoint firstPlayerPos(60,86);
	TPoint secondPlayerPos(60,100);
	TPoint thirdPlayerPos(60,114);
	TPoint fourthPlayerPos(60,128);
	TPoint fifthPlayerPos(60,142);
	
	TPoint firstHSPos(90,86);
	TPoint secondHSPos(90,100);
	TPoint thirdHSPos(90,114);
	TPoint fourthHSPos(90,128);
	TPoint fifthHSPos(90,142);

	TPoint firstLetterPos(78,160);
	TPoint secondLetterPos(88,160);
	TPoint thirdLetterPos(98,160);

	//CFont* font = (CFont*)LatinPlain12(); //font for scale
	CFont* font = (CFont*)LatinPlain12(); //font for scale
	iOffScreenBitmapGc->UseFont(font);


	iOffScreenBitmapGc->SetPenColor(inactive);
	iOffScreenBitmapGc->SetBrushColor(inactive);
	iOffScreenBitmapGc->DrawText(first, firstPlayerPos);
	iOffScreenBitmapGc->DrawText(second, secondPlayerPos);
	iOffScreenBitmapGc->DrawText(third, thirdPlayerPos);
	iOffScreenBitmapGc->DrawText(fourth, fourthPlayerPos);
	iOffScreenBitmapGc->DrawText(fifth, fifthPlayerPos);

	iOffScreenBitmapGc->DrawText(firstHS, firstHSPos);
	iOffScreenBitmapGc->DrawText(secondHS, secondHSPos);
	iOffScreenBitmapGc->DrawText(thirdHS, thirdHSPos);
	iOffScreenBitmapGc->DrawText(fourthHS, fourthHSPos);
	iOffScreenBitmapGc->DrawText(fifthHS, fifthHSPos);
	iOffScreenBitmapGc->DiscardFont();

	if (iEnterHighScore)
		{
		font = (CFont*)LatinPlain12(); //font for scale
		iOffScreenBitmapGc->UseFont(font);
		
		TBuf<1> firstLetter;
		TBuf<1> secondLetter;
		TBuf<1> thirdLetter;
		//string.Format(_L(" %c %c %c "),player[iFirstLetter],player[iSecondLetter],player[iThirdLetter]);
		
		switch(iPos)
			{
		case 0:
			{
			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			firstLetter.Format(_L("%c"),player[iFirstLetter]);
			iOffScreenBitmapGc->DrawText(firstLetter, firstLetterPos);

			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			secondLetter.Format(_L("%c"),player[iSecondLetter]);
			iOffScreenBitmapGc->DrawText(secondLetter, secondLetterPos);

			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			thirdLetter.Format(_L("%c"),player[iThirdLetter]);
			iOffScreenBitmapGc->DrawText(thirdLetter, thirdLetterPos);
			}
			break;

		case 1:
			{
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			firstLetter.Format(_L("%c"),player[iFirstLetter]);
			iOffScreenBitmapGc->DrawText(firstLetter, firstLetterPos);

			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			secondLetter.Format(_L("%c"),player[iSecondLetter]);
			iOffScreenBitmapGc->DrawText(secondLetter, secondLetterPos);

			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			thirdLetter.Format(_L("%c"),player[iThirdLetter]);
			iOffScreenBitmapGc->DrawText(thirdLetter, thirdLetterPos);
			}
			break;

		case 2:
			{
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			firstLetter.Format(_L("%c"),player[iFirstLetter]);
			iOffScreenBitmapGc->DrawText(firstLetter, firstLetterPos);

			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			secondLetter.Format(_L("%c"),player[iSecondLetter]);
			iOffScreenBitmapGc->DrawText(secondLetter, secondLetterPos);

			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			thirdLetter.Format(_L("%c"),player[iThirdLetter]);
			iOffScreenBitmapGc->DrawText(thirdLetter, thirdLetterPos);
			}
			break;

		default:
			break;
			};
		iOffScreenBitmapGc->DiscardFont();
		}
	else
		{
		font = (CFont*)LatinPlain12(); //font for scale
		iOffScreenBitmapGc->UseFont(font);
		iOffScreenBitmapGc->SetPenColor(inactive);
		iOffScreenBitmapGc->SetBrushColor(inactive);
		iOffScreenBitmapGc->DrawText(_L(" "), firstLetterPos);
		iOffScreenBitmapGc->DrawText(_L(" "), secondLetterPos);
		iOffScreenBitmapGc->DrawText(_L(" "), thirdLetterPos);
		iOffScreenBitmapGc->DiscardFont();
		}

    }

// ---------------------------------------------------------
// CTOPGUNContainer9::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CTOPGUNContainer9::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }
// ---------------------------------------------------------
// CTOPGUNContainer9::OfferKeyEventL(
//				     const TKeyEvent& aKeyEvent, TEventCode aType)
// ---------------------------------------------------------
//
TKeyResponse CTOPGUNContainer9::OfferKeyEventL(const TKeyEvent& aKeyEvent, TEventCode /*aType*/)
    {
	if (iEnterHighScore)
		{
		switch ( aKeyEvent.iCode )
			{
			case EKeyUpArrow:
				{
				switch(iPos)
					{
				case 0:
					{
					if(iFirstLetter < 25)
						{
						iFirstLetter++;	
						}
					else
						{
						iFirstLetter = 0;	
						}
					}
					break;

				case 1:
					{
					if(iSecondLetter < 25)
						{
						iSecondLetter++;	
						}
					else
						{
						iSecondLetter = 0;	
						}
					}
					break;

				case 2:
					{
					if(iThirdLetter < 25)
						{
						iThirdLetter++;	
						}
					else
						{
						iThirdLetter = 0;	
						}
					}
					break;
				default:
					break;
					};
				DrawNow();
				return EKeyWasConsumed;
				}
			case EKeyDownArrow:
				{
				switch(iPos)
					{
				case 0:
					{
					if(0 < iFirstLetter)
						{
						iFirstLetter--;	
						}
					else
						{
						iFirstLetter = 25;	
						}
					}
					break;

				case 1:
					{
					if(0 < iSecondLetter)
						{
						iSecondLetter--;	
						}
					else
						{
						iSecondLetter = 25;	
						}
					}
					break;

				case 2:
					{
					if(0 < iThirdLetter)
						{
						iThirdLetter--;	
						}
					else
						{
						iThirdLetter = 25;	
						}
					}
					break;
				default:
					break;
					};
				DrawNow();
				return EKeyWasConsumed;
				}
			case EKeyLeftArrow:
				{
				PreviousLetter();
				DrawNow();
				return EKeyWasConsumed;
				}
			case EKeyRightArrow:
				{
				NextLetter();
				DrawNow();
				return EKeyWasConsumed;
				}
			case 0x0000f843:
				{
				iLevelLoader.ResetScore();
				iEnterHighScore = EFalse;
				iView.SwitchView(0); //go to main menu
				return EKeyWasConsumed;
				}
			case 0x0000f842:
			case EKeyEnter:
			case EKeyOK:
				{
				iEnterHighScore = EFalse;
				if (iDocument.CheckHighScore((TUint)iLevelLoader.GetScore()))
					{
					TChar player[26] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
					
					CHighScoreItem* hs = CHighScoreItem::NewL();
					hs->SetHighScore((TUint)iLevelLoader.GetScore());
					
					TBuf<3> playerName;
					playerName.Append(player[iFirstLetter]);
					playerName.Append(player[iSecondLetter]);
					playerName.Append(player[iThirdLetter]);
					
					//HBufC* result = HBufC::NewMaxLC( iPlayerName.Length() );
					//*result = iPlayerName;
					hs->SetPlayerNameL(playerName.AllocL());
					iDocument.RemoveHS(4);
					iDocument.InsertHighScoreItemL(hs,4);
					iDocument.SortHighScoreList();
					iLevelLoader.ResetScore();
					DrawNow();
					}
				return EKeyWasConsumed;
				}
			default:
				return EKeyWasNotConsumed;	
			}
		}
		else
		{
		iLevelLoader.ResetScore();
		switch ( aKeyEvent.iCode )
			{
			case 0x0000f843:
				{
				iView.SwitchView(0); //go to main menu
				return EKeyWasConsumed;
				}
			default:
				return EKeyWasNotConsumed;
			}
		}
    }

void CTOPGUNContainer9::MoveUp()
	{
	if (iSelectPos >= 1)
		{
		iSelectPos--;
		DrawNow();
		}
	}

void CTOPGUNContainer9::MoveDown()
	{
	if (iSelectPos < 3)
		{
		iSelectPos++;
		DrawNow();
		}
	}

void CTOPGUNContainer9::EnterHighScore()
	{
	iEnterHighScore = ETrue;
	}

/*
void CTOPGUNContainer9::SetLevelLoader(CLevelLoader* aLevelLoader)
	{
	iLevelLoader = aLevelLoader;
    if (iLevelLoader->GetEnterHighScore())
		{
		if (iDocument->CheckHighScore((TUint)iLevelLoader->GetScore()))
			{
			iLevelLoader->EnterHighScore(EFalse);
			iEnterHighScore = ETrue;
			//DrawNow();
			}
		}
	}
*/

// End of File  
