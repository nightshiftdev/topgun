/*
* ============================================================================
*  Name     : CTOPGUNAppUi from TOPGUNAppUi.cpp
*  Part of  : TOPGUN
*  Created  : 5/9/2004 by pawel@wapice.com
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  :
*  Copyright: P&P
* ============================================================================
*/

// INCLUDE FILES
//system
#include <TOPGUN.rsg>
#include <aknviewappui.h>
#include <avkon.hrh>
#include <bautils.h>
//user
#include "TOPGUNAppUi.h"
#include "TOPGUNView.h"
#include "TOPGUNView2.h"
#include "TOPGUNView3.h"
#include "TOPGUNView4.h"
#include "TOPGUNView5.h"
#include "TOPGUNView6.h"
#include "TOPGUNView7.h"
#include "TOPGUNView8.h"
#include "TOPGUNView9.h"
#include "SplashView.h"
#include "SplashView1.h"
#include "LevelLoader.h"
#include "topgun.hrh"
//sound
#include "CSndMixer.h"
#include "CWavLoader.h"
//database
#include "TOPGUNDocument.h"
#include "DBEngine.h" 
//game settings
#include "GameSettings.h"
//score
#include "HighScore.h"



// ================= MEMBER FUNCTIONS =======================
//
// ----------------------------------------------------------
// CTOPGUNAppUi::ConstructL()
// 
// ----------------------------------------------------------
//
void CTOPGUNAppUi::ConstructL()
    {
	//do not block the keys, when multiple keys pressed
	//example: direction key pressed + fire key pressed 
	SetKeyBlockMode(ENoKeyBlock);

	iView = NULL;
    iView2 = NULL;
	iView3 = NULL;

    BaseConstructL();
    // Show tabs for main views from resources
    CEikStatusPane* spa = StatusPane();

	//Full Screen Mode only with option pane
	spa->MakeVisible(EFalse);

    // Fetch pointer to the default navi pane control
    iNaviPane = (CAknNavigationControlContainer*)spa->ControlL( 
        TUid::Uid(EEikStatusPaneUidNavi));

    // Tabgroup has been read from resource and it were pushed to the navi pane. 
    // Get pointer to the navigation decorator with the ResourceDecorator() function. 
    // Application owns the decorator and it has responsibility to delete the object.
    iDecoratedTabGroup = iNaviPane->ResourceDecorator();
    if (iDecoratedTabGroup)
        {
        iTabGroup = (CAknTabGroup*) iDecoratedTabGroup->DecoratedControl();
        }

	InitSoundL();
	
	iLevelLoader = CLevelLoader::NewL();
	
    CTOPGUNView* view1 = new (ELeave) CTOPGUNView;
    CleanupStack::PushL( view1 );
    view1->ConstructL(iSndMixer,
					  iMusicSample,
					  iSelectSample,
					  iButtonSample,
					  iAudioVol,
					  iSfxVol);
	iView = view1;
    AddViewL( view1 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view1
	view1->SetAppUi(this);

    CTOPGUNView2* view2 = new (ELeave) CTOPGUNView2(*iSndMixer,
													iMusic,
													iShotSound,
													iExplosionSound,
													iAudioVol,
													iSfxVol,
													*iLevelLoader,
													*this);
    CleanupStack::PushL( view2 );
    view2->ConstructL();
    SetView2( view2 );
	AddViewL( view2 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view2

	CTOPGUNView3* view3 = new (ELeave) CTOPGUNView3;
    CleanupStack::PushL( view3 );
    view3->ConstructL(iSndMixer,
					  iMusicSample,
					  iSelectSample,
					  iButtonSample,
					  iAudioVol,
					  iSfxVol);
	iView3 = view3;
    AddViewL( view3 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view3
	view3->SetAppUi(this);

	CTOPGUNView4* view4 = new (ELeave) CTOPGUNView4;
    CleanupStack::PushL( view4 );
    view4->ConstructL();
    AddViewL( view4 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view4
	view4->SetAppUi(this);

	CTOPGUNView5* view5 = new (ELeave) CTOPGUNView5;
    CleanupStack::PushL( view5 );
    view5->ConstructL();
    AddViewL( view5 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view5
	view5->SetAppUi(this);

	CTOPGUNView6* view6 = new (ELeave) CTOPGUNView6;
    CleanupStack::PushL( view6 );
    view6->ConstructL();
    AddViewL( view6 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view6
	view6->SetAppUi(this);

	CTOPGUNView7* view7 = new (ELeave) CTOPGUNView7(*iLevelLoader,
													*this);
    CleanupStack::PushL( view7 );
    AddViewL( view7 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view7


	CTOPGUNView8* view8 = new (ELeave) CTOPGUNView8(*iLevelLoader,
													*this);
    CleanupStack::PushL( view8 );
    AddViewL( view8 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view8
	//view8->SetAppUi(this);

	CTOPGUNView9* view9 = new (ELeave) CTOPGUNView9(*iLevelLoader,
													*this);
    CleanupStack::PushL( view9 );
    view9->ConstructL();
    AddViewL( view9 );      // transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // view9


	CSplashView* splashview = new (ELeave) CSplashView;
	CleanupStack::PushL( splashview );
    splashview->ConstructL();
	splashview->SetAppUi(this, iTabGroup);
    AddViewL( splashview ); //transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // splash view

	CSplashView1* splashview1 = new (ELeave) CSplashView1;
	CleanupStack::PushL( splashview1 );
    splashview1->ConstructL();
	splashview1->SetAppUi(this, iTabGroup);
    AddViewL( splashview1 ); //transfer ownership to CAknViewAppUi
    CleanupStack::Pop();    // splash view
	

    SetDefaultViewL(*splashview);
//    RunGameFirstTimeL();
//	SetDefaultViewL(*view1);
    }

void CTOPGUNAppUi::InitSoundL()
	{
	CWavLoader* wavLoader = CWavLoader::NewLC();

	iMusicSample = wavLoader->LoadL(_L("C:\\Data\\Sounds\\menu.wav") ); //channel 1
	iButtonSample = wavLoader->LoadL( _L("C:\\Data\\Sounds\\button.wav") );//channel 2
	iSelectSample = wavLoader->LoadL( _L("C:\\Data\\Sounds\\select.wav") );//channel 3
	//iBackSample = wavLoader->LoadL( _L("back.wav") );//channel 4
	iMusic = wavLoader->LoadL(_L("C:\\Data\\Sounds\\music2.wav") );//channel 5
	iShotSound = wavLoader->LoadL( _L("C:\\Data\\Sounds\\effect.wav") );//channel 6
	iExplosionSound = wavLoader->LoadL( _L("C:\\Data\\Sounds\\effect2.wav") );//channel 7

	CleanupStack::PopAndDestroy( wavLoader );

	// create sound mixer
	iSndMixer = CSndMixer::NewL();

	// make iMusicSample repeat itself
	iMusicSample.iRepEnd = iMusicSample.iLength;
	iMusic.iRepEnd = iMusic.iLength;

	TInt iAudioVol = 160;
	TInt iSfxVol = 64;
	}

// ----------------------------------------------------
// CTOPGUNAppUi::~CTOPGUNAppUi()
// Destructor
// Frees reserved resources
// ----------------------------------------------------
//
CTOPGUNAppUi::~CTOPGUNAppUi()
    {
	//iSndMixer->Pause();

    delete iDecoratedTabGroup;

	delete iSndMixer;
	delete iEnterSample.iData;
	delete iMusicSample.iData;
	delete iButtonSample.iData;
	delete iSelectSample.iData;
	//delete iBackSample.iData;
	delete iShotSound.iData;
	delete iMusic.iData;
	delete iExplosionSound.iData;
	delete iLevelLoader;

    //CloseDatabaseL();
	}

// ------------------------------------------------------------------------------
// CTOPGUNAppUi::DynInitMenuPaneL(TInt aResourceId,CEikMenuPane* aMenuPane)
//  This function is called by the EIKON framework just before it displays
//  a menu pane. Its default implementation is empty, and by overriding it,
//  the application can set the state of menu items dynamically according
//  to the state of application data.
// ------------------------------------------------------------------------------
//
void CTOPGUNAppUi::DynInitMenuPaneL(
    TInt /*aResourceId*/,CEikMenuPane* /*aMenuPane*/)
    {
    }

// ----------------------------------------------------
// CTOPGUNAppUi::HandleKeyEventL(
//     const TKeyEvent& aKeyEvent,TEventCode /*aType*/)
// takes care of key event handling
// ----------------------------------------------------
//
TKeyResponse CTOPGUNAppUi::HandleKeyEventL(
    const TKeyEvent& /*aKeyEvent*/,TEventCode /*aType*/)
    {
	
    if ( iTabGroup == NULL )
        {
        return EKeyWasNotConsumed;
        }
    /*
    TInt active = iTabGroup->ActiveTabIndex();
    TInt count = iTabGroup->TabCount();

    switch ( aKeyEvent.iCode )
        {
        case EKeyLeftArrow:
            if ( active > 0 )
                {
                active--;
                iTabGroup->SetActiveTabByIndex( active );
                ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(active)));
                }
            break;
        case EKeyRightArrow:
            if( (active + 1) < count )
                {
                active++;
                iTabGroup->SetActiveTabByIndex( active );
                ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(active)));
                }
            break;
        default:
            return EKeyWasNotConsumed;
            break;
        }
	*/
    return EKeyWasConsumed;
    }

// ----------------------------------------------------
// CTOPGUNAppUi::HandleCommandL(TInt aCommand)
// takes care of command handling
// ----------------------------------------------------
//
void CTOPGUNAppUi::HandleCommandL(TInt aCommand)
    {
	switch(aCommand)
        {
		//case EAknSoftkeyBack:
		case EEikCmdExit:
        //case EAknSoftkeyExit:
			{
			//settings
			//RunGameFirstTimeL();
			
			
			//SaveNowL();
			TRAPD( Err, SaveL() );
			
			
			//SaveVolL(iSfxVol,iAudioVol);
            
			User::Exit(KErrNone);
            break;
			}
		case EStartGame:
			iTabGroup->SetActiveTabByIndex( 1 );
			ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(1)));
			break;
		case EStopGame:
			iTabGroup->SetActiveTabByIndex( 0 );
			ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(0)));
			break;
        default:
			Exit();
            break;
        }
    }

// ----------------------------------------------------
// CTOPGUNAppUi::SwitchView()
// 
// ----------------------------------------------------
//
void CTOPGUNAppUi::SwitchView(TInt aIndex)
	{
	if (iTabGroup)
		{
		iTabGroup->SetActiveTabByIndex( aIndex );
		ActivateLocalViewL(TUid::Uid(iTabGroup->TabIdFromIndex(aIndex)));
		}
	}

// ----------------------------------------------------
// CTOPGUNAppUi::SetView2(CTOPGUNView2* aView2)
// sets iView2 memeber variable
// ----------------------------------------------------
//
void CTOPGUNAppUi::SetView2(CTOPGUNView2* aView2)
	{
	iView2 = aView2;
	}

// ----------------------------------------------------
// CTOPGUNAppUi::SetVolume(TInt aSfxVol, TInt aAudioVol)
// 
// ----------------------------------------------------
//
void CTOPGUNAppUi::SetVolume(TInt aSfxVol, TInt aAudioVol,const TBool aCommandFromEngine)
	{
	iSfxVol = aSfxVol;
    iAudioVol = aAudioVol;
	if (aCommandFromEngine)
		{
		iView->SetVolume(aSfxVol,aAudioVol);
		}
	else
		{
		iView2->SetVolume(aSfxVol,aAudioVol);
		}
	iView3->SetVolumeForContainer(aSfxVol,aAudioVol);
	SaveVolL(aSfxVol,aAudioVol);
	}

// ---------------------------------------------------------------------------
// CBookstoreAppUi::OpenDatabaseL()
//
// Create instance of iBookstoreDb and open existing database.
// ---------------------------------------------------------------------------
/*
void CTOPGUNAppUi::OpenDatabaseL()
    {
    iTopgunDb = CTopgunDb::NewL();
    iTopgunDb->OpenDbL(iSoundDatabaseFile);
    }
*/

// ---------------------------------------------------------------------------
// CBookstoreAppUi::CreateDatabaseL()
//
// Create instance of iBookstoreDb and create a new database.
// ---------------------------------------------------------------------------
//
/*
void CTOPGUNAppUi::CreateDatabaseL()
    {
    iTopgunDb = CTopgunDb::NewL();
    iTopgunDb->CreateDbL(iSoundDatabaseFile); // replaces, if exists
    }
*/

// ---------------------------------------------------------------------------
// CBookstoreAppUi::CloseDatabaseL()
//
// Close an open database. Database opened with OpenDatabaseL or
// CreateDatabaseL must be closed, when not used any more.
// ---------------------------------------------------------------------------
//
/*
void CTOPGUNAppUi::CloseDatabaseL()
    {
	if(iTopgunDb)
        {
		if(iTopgunDb->IsOpen())
			{
			iTopgunDb->Close();
			}    
        delete iTopgunDb;
        iTopgunDb = NULL;
        }
    }
*/

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::ApplicationDriveAndPath()
//
// Get the application path and drive. It must be done differently in the
// development environment and in the device.
// ---------------------------------------------------------------------------
//
TFileName CTOPGUNAppUi::ApplicationDriveAndPath() const
    {
    TFileName appfullname(Application()->AppFullName());
    TParse parse;

#ifdef __WINS__ 

    // On development environment the AppFullName points to z drive.
    // Replace it to point to C drive, which is writable by our application.
    parse.Set(_L("c:"), &appfullname, NULL);

#else // In device use the application fullname directly.

    parse.Set(appfullname, NULL, NULL);

#endif

    TFileName fn = parse.DriveAndPath();
    // Make sure the path exists (create if not). This is needed in EMULATOR.
    BaflUtils::EnsurePathExistsL(CCoeEnv::Static()->FsSession(), fn);
    return fn;
    }

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::AddSoundSettingsL(TBool aUseSql, TDes& aSfx, TDes& aAudio)
// ---------------------------------------------------------------------------
//
/*
void CTOPGUNAppUi::AddSoundSettingsL(TBool aUseSql, TDes& aSfx, TDes& aAudio)
    {

    _LIT(KErrorMsg,"Failed. Make sure the fields are not empty.");
    TInt err(KErrNone);

    // Lengths are from DBEngine.h. Author uses default length (50)
    //TBuf<32> sfx;
	//TBuf<32> audio;

    

    if(aUseSql)
		{
        err = iTopgunDb->AddTopgunWithSqlL(aSfx,
	                                       aAudio);
		}
    else
		{
        err = iTopgunDb->AddTopgunWithCppApiL(aSfx,
                                              aAudio);
		}
    }
*/

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::RemoveSettingsL()
// ---------------------------------------------------------------------------
//
/*
void CTOPGUNAppUi::RemoveSettingsL()
    {
    TInt resultCount;
    iTopgunDb->RemoveAllTopgunL(resultCount);
    }
*/

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::GetSettingsL(TInt& aSfx, TInt& aAudio)
// ---------------------------------------------------------------------------
//
/*
TInt CTOPGUNAppUi::GetSettingsL(TInt& aSfx, TInt& aAudio)
    {
	TInt count = 0;
    CDesCArrayFlat* settings = iTopgunDb->GetAllTopgunL();
	count = settings->Count();

	if (count != 0)
		{
		TBuf<128> tmp;
		TBuf<128> sfx;
		TBuf<128> audio;
		tmp.Copy(settings->MdcaPoint(0));

		TInt location = tmp.Locate('|');
		TInt locationR = tmp.LocateReverse('|');

		sfx = tmp.Left(location);
		audio = tmp.Right(locationR);

		TLex sfxLex(sfx);
		TLex audioLex(audio);

		sfxLex.Val(aSfx);
		audioLex.Val(aAudio);
		}

    CleanupStack::PushL(settings);
    CleanupStack::PopAndDestroy(settings);
	return count;
    }
*/

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::SaveL(TInt aSfx, TInt aAudio)
// ---------------------------------------------------------------------------
//
void CTOPGUNAppUi::SaveVolL(TInt aSfx, TInt aAudio)
	{
	CGameSettings* settings = CGameSettings::NewL();
	settings->SetSfxVol(aSfx);
	settings->SetAudioVol(aAudio);
	GetDocument()->SetGameSettingsL(settings,0); //0 - overwrite settings
	//CleanupStack::Pop(settings);
	//delete settings;
	
	/*
	if(BaflUtils::FileExists(CCoeEnv::Static()->FsSession(),iSoundDatabaseFile))
        {
		CDesCArrayFlat* settings = iTopgunDb->GetAllTopgunL();
		TInt count = settings->Count();
		CleanupStack::PushL(settings);
		CleanupStack::PopAndDestroy(settings);

		if (count == 0)
			{
			TBuf<32> sfx;
			TBuf<32> audio;
			sfx.Format(_L("%d"),aSfx);
			audio.Format(_L("%d"),aAudio);
			AddSoundSettingsL(ETrue,sfx,audio);
			}
		else
			{
			RemoveSettingsL();
			TBuf<32> sfx;
			TBuf<32> audio;
			sfx.Format(_L("%d"),aSfx);
			audio.Format(_L("%d"),aAudio);
			AddSoundSettingsL(ETrue,sfx,audio);
			}
        }
	*/
	}

TBool CTOPGUNAppUi::CheckHighScore(const TUint aHighScore)
	{
	return GetDocument()->CheckHighScore(aHighScore);
	}

void CTOPGUNAppUi::InsertHighScoreL(const TUint aPos ,const TUint aHighScore, HBufC* aPlayerName)
	{
	CHighScoreItem* highscore = CHighScoreItem::NewL();
	highscore->SetHighScore(aHighScore);
	highscore->SetPlayerNameL(aPlayerName);
	GetDocument()->InsertHighScoreItemL(highscore,aPos);//enter as the last one
	//GetDocument()->SortHighScoreList(); //then sort the list
	//CleanupStack::Pop(highscore);
	}

void CTOPGUNAppUi::AddDummyHighScoreL()
	{
	_LIT(KAAA,"AAA");
	_LIT(KBBB,"BBB");
	_LIT(KCCC,"CCC");
	_LIT(KDDD,"DDD");
	_LIT(KEEE,"EEE");
	TUint score = 2500;
	InsertHighScoreL(0,score*5, KAAA().AllocL());
	InsertHighScoreL(1,score*4, KBBB().AllocL());
	InsertHighScoreL(2,score*3, KCCC().AllocL());
	InsertHighScoreL(3,score*2, KDDD().AllocL());
	InsertHighScoreL(4,score, KEEE().AllocL());
	}

void CTOPGUNAppUi::RunGameFirstTimeL()
	{
	CHighScoreItem* hs = GetDocument()->HighScoreItem(0);
	if(hs == NULL)
		{
		AddDummyHighScoreL();
		}

	CGameSettings* settings = GetDocument()->GameSettings(0);

	if (settings == NULL)
		{
		AddDefaultVolSettingsL();
		}
	else
		{
		TInt iAudioVol = settings->AudioVol();
		TInt iSfxVol = settings->SfxVol();
		SetVolume(iSfxVol, iAudioVol, EFalse);
		}
	SaveNowL();
	}


void CTOPGUNAppUi::AddDefaultVolSettingsL()
	{
	TInt iAudioVol = 160;
	TInt iSfxVol = 64;
	SaveVolL(iSfxVol,iAudioVol);
	SetVolume(iSfxVol, iAudioVol, EFalse);
	}

// ---------------------------------------------------------------------------
// CTOPGUNAppUi::LoadL(TInt& aSfx, TInt& aAudio)
// ---------------------------------------------------------------------------
//
void CTOPGUNAppUi::LoadL(TInt& aSfx, TInt& aAudio)
	{
	TInt count = 0;
	//TInt count = GetSettingsL(aSfx,aAudio);
		
	if (count == 0)
		{
		aSfx = 64;
		aAudio = 128;
		}
	}

void CTOPGUNAppUi::SaveNowL()
	{
	TRAPD( Err, SaveL() );
	}

CTOPGUNDocument* CTOPGUNAppUi::GetDocument()
	{
	return /*static_cast<CARFUNDocument*>*/(CTOPGUNDocument*)(Document());
	//return static_cast<CARFUNDocument*>(Document());
	}

void CTOPGUNAppUi::StopMenuMusic()
	{
	if (iSndMixer)
		{
		iSndMixer->Stop(1);
		}
	}

void CTOPGUNAppUi::StartMenuMusic()
	{
	if (iSndMixer)
		{
		iSndMixer->Play( iMusicSample, 1, 22050, iAudioVol );
		}
	}


/*
void CTOPGUNAppUi::SetLevelLoader(CLevelLoader* aLevelLoader)
	{
	iLevelLoader = aLevelLoader;
	}

CLevelLoader* CTOPGUNAppUi::GetLevelLoader()
	{
	return iLevelLoader;
	}
*/

// End of File  
