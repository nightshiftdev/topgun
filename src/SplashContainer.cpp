/*
* ============================================================================
*  Name     : CSplashContainer from SplashContainer.h
*  Part of  : Splash
*  Created  : IlPadriono group
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  : 1.0
*  Copyright: IlPadrino group.
* ============================================================================
*/

// INCLUDE FILES
#include "SplashContainer.h"
#include "SplashView.h"
// for fonts
#include <aknutils.h>  
//bitmaps
#include <topgun.mbg>
// for double screen buffering  
#include <fbs.h>	
#include <bitdev.h>
#include <bitstd.h>
#include "bitmapmethods.h"


//CONSTANTS
//_LIT (KMultiBitmapFilename,"\\system\\apps\\topgun\\topgun.mbm"); 
_LIT (KMultiBitmapFilename,"z:\\resource\\apps\\topgun.mbm");
// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CSplashContainer::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CSplashContainer::ConstructL(const TRect& aRect)
	{
	// Create and activate the main window
    //
    CreateWindowL();
    SetRect(aRect);

	iBackgroundImage = iEikonEnv->CreateBitmapL(KMultiBitmapFilename,EMbmTopgunIlpadrino);	
	// Create the off screen bitmap and device / gc
    iOffScreenBitmap       = NBitmapMethods::CreateBitmapL(Rect().Size(),KColourDepth);
    iOffScreenBitmapDevice = NBitmapMethods::CreateBitmapDeviceL(*iOffScreenBitmap);
    iOffScreenBitmapGc     = NBitmapMethods::CreateGraphicsContextL(*iOffScreenBitmapDevice);


    ActivateL();

    // 
    // Initialise mode to Splash.
    // The iTick value is set to three seconds by default. This is enough for a
    // fixed screen but will not allow animation unless you redefine the tick value
    // using SetTimerTick()
	iState=CSplashContainer::ESplash;
    iTick = 24000000;

    // Create a periodic timer but don't start it yet
	iPeriodicTimer = CPeriodic::NewL(CActive::EPriorityStandard);
	    //
   
    //
    // Create the SplashScreen
    // Set the refresh rate of the screen to 1000 micro-seconds 
    //
    //CSplashContainer::ConstructL(aRect);
    SetTimerTick(10000);

    //
    // Configure some internal counters that are used for displaying
    // the splash screen (app specific) - not par or the CSplashContainer
    // 
    // iPreCount is the duration (in Ticks, 1 ticks = 1000 micro-sec according to
    //           previous initialisation) of the "black screen" before the text
    //           starts to appear
    // iColorCount is the value that shall be used for each R,G and B component of
    //           displayed text color
    // iPostCount is the duration (in Ticks) of display of the splash screen after
    //           the animation
    iPreCount  =10;
    iColorCount=0;
    iPostCount =20;

    //
    // Activate the splashscreen animation
    //
	StartTimer();

	//optimization
	//iSndMixer = aSndMixer;
	//iEnterSample = aEnterSample;
	//iAudioVol = aAudioVol;
	//iSfxVol = aSfxVol;

	/*
	CWavLoader* wavLoader = CWavLoader::NewLC();

	iEnterSample = wavLoader->LoadL(_L("enter.wav") ); //chanel 1

	CleanupStack::PopAndDestroy( wavLoader );
	*/
	////optimization
	//iSndMixer->Play( iEnterSample, 1, 11025, iAudioVol );
	//iSndMixer->Resume();
	}

// Destructor
CSplashContainer::~CSplashContainer()
	{
	if (iOffScreenBitmapGc)
		{
		delete iOffScreenBitmapGc;
		iOffScreenBitmapGc = NULL;
		}

	if (iOffScreenBitmapDevice)
		{
		delete iOffScreenBitmapDevice;
		iOffScreenBitmapDevice = NULL;
		}	
	
	if (iOffScreenBitmap)
		{
		delete iOffScreenBitmap;
		iOffScreenBitmap = NULL;
		}

	if (iBackgroundImage)
		{
		delete iBackgroundImage;
		iBackgroundImage = NULL;
		}
	
    StopTimer();
	delete iPeriodicTimer;
	iPeriodicTimer = NULL;
	}

// ---------------------------------------------------------
// CSplashContainer::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CSplashContainer::SizeChanged()
    {
    }

// ---------------------------------------------------------
// CSplashContainer::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CSplashContainer::CountComponentControls() const
    {
    return 0; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CSplashContainer::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CSplashContainer::ComponentControl(TInt /*aIndex*/) const
    {
    return NULL;
    }

// ---------------------------------------------------------
// CSplashContainer::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CSplashContainer::Draw(const TRect& /*aRect*/) const
	{
    //
    // Call the appropriate Draw function depending of the current mode
    // (Each Draw function is a non-pure virtual function). If it is not
    // defined by the child class, there won't be any error but nothing 
    // will be drawn.
    //
	switch(iState)
		{	
    case CSplashContainer::ESplash:
        DrawSplash();
        break;
    case CSplashContainer::EMain:
        DrawMain();
		iSplashView->SwitchView();
        break;
    case CSplashContainer::EExiting:
        DrawExiting();
        break;
		}
	SystemGc().BitBlt(Rect().iTl,iOffScreenBitmap);
	}

// ---------------------------------------------------------
// CSonarBlueContainer2::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CSplashContainer::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }


void CSplashContainer::DrawSplash(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	iOffScreenBitmapGc->BitBlt(TPoint(0,0),iBackgroundImage);
 
	/*
	//CWindowGc& gc = SystemGc();
    TRect    rect = Rect();

    //
    // Draw Black background
    //
    bitmapContext->SetPenStyle(CGraphicsContext::ENullPen);
    bitmapContext->SetBrushStyle(CGraphicsContext::ESolidBrush);
    bitmapContext->SetBrushColor(KRgbBlack);
    bitmapContext->DrawRect(rect);

    //
    // Select default font for title
    // The color will change from black -> white with the increase of iColorCount
    //
    const CFont* font = (CFont*)LatinBold19();
    bitmapContext->UseFont(font);
    bitmapContext->SetPenStyle(CGraphicsContext::ESolidPen);
    bitmapContext->SetPenColor(TRgb(iColorCount,iColorCount,iColorCount));

    //
    // Draw the text, horizontally centered and vertically slightly below center
    //
    TSize aSize(rect.Width(),font->HeightInPixels()+5);
    rect.SetRect(TPoint(0,(rect.Height()/2)-font->HeightInPixels()-5),aSize);
    bitmapContext->DrawText(_L("Modbus Master"),rect,font->AscentInPixels(),CGraphicsContext::ECenter);

    rect.Move(0,font->HeightInPixels()+2);
    bitmapContext->DrawText(_L(""),rect,font->AscentInPixels(),CGraphicsContext::ECenter);
	
	font = (CFont*)LatinPlain12();
    bitmapContext->UseFont(font);
    
	rect.Move(0,font->HeightInPixels()+2);
    bitmapContext->DrawText(_L("Wapice Ltd. All rights reserved."),rect,font->AscentInPixels(),CGraphicsContext::ECenter);
    bitmapContext->DiscardFont();
	*/
	}

void CSplashContainer::DrawMain(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	//CWindowGc& gc = SystemGc();
    // TODO: Add your drawing code here
    // example code...
	/*
    bitmapContext->SetPenStyle(CGraphicsContext::ENullPen);
    bitmapContext->SetBrushColor(KRgbWhite);
    bitmapContext->SetBrushStyle(CGraphicsContext::ESolidBrush);
    bitmapContext->DrawRect(aRect);
	*/
	iOffScreenBitmapGc->SetPenStyle(CGraphicsContext::ENullPen);
    iOffScreenBitmapGc->SetBrushStyle(CGraphicsContext::ESolidBrush);
    iOffScreenBitmapGc->SetBrushColor(KRgbBlack);
    iOffScreenBitmapGc->DrawRect(Rect());
	}

void CSplashContainer::DrawExiting(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	/*
	 TRect    rect = Rect();

    //
    // Draw Black background
    //
    bitmapContext->SetPenStyle(CGraphicsContext::ENullPen);
    bitmapContext->SetBrushStyle(CGraphicsContext::ESolidBrush);
    bitmapContext->SetBrushColor(KRgbBlack);
    bitmapContext->DrawRect(rect);
	*/
	}


// ---------------------------------------------------------
// CSplashContainer::SetState(CSplashContainer::TState aState) 
// Change the mode of the container (possible values are
// ESplash, EMain, EExiting)
// ---------------------------------------------------------
//
void CSplashContainer::SetState(CSplashContainer::TState aState)
	{
	iState=aState;
	}

// ---------------------------------------------------------
// CSplashContainer::State() 
// Get the current mode. 
// ---------------------------------------------------------
//
CSplashContainer::TState CSplashContainer::State()
	{
	return iState;
	}

// ---------------------------------------------------------
// CSplashContainer::SetTimerTick(TTimeIntervalMicroSeconds32  aTick) 
// Set the Tick value (duration between two screen redraw)
// ---------------------------------------------------------
//
void CSplashContainer::SetTimerTick(TTimeIntervalMicroSeconds32  aTick)
	{
	iTick=aTick;
	}


// ---------------------------------------------------------
// CSplashContainer::DoPeriod() 
// Function that is called periodically by the timer.
// Call the child Tick() treatment and request a screen 
// redraw if needed.
// ---------------------------------------------------------
//
void CSplashContainer::DoPeriod()
	{
    if (Tick())
		{
		// Update the screen
	    CWindowGc& gc = SystemGc();
	    gc.Activate(*DrawableWindow());
	    Draw(Rect());
	    gc.Deactivate();
		}
	}

// This function is called by the periodic timer
TInt CSplashContainer::Period(TAny * aPtr)
	{
    ((CSplashContainer*)aPtr)->DoPeriod();
    //returning a value of TRUE indicates the callback should be done again
	return TRUE;
	}	

// Default treatment for a Tick: do nothing!
// (this is a virtual function that should be defined in child class)
TBool CSplashContainer::Tick()
		{
	 //
    // Start by precount
    // (during precount iColorCount is zero, so splash text will be displayed
    // in black and then not visible)
    if(iPreCount>0)
		{
        iPreCount--;
		}
    //
    // After PreCount, fade the text to white with a 15 increment.
    //
    else if(iColorCount<255) 
		{
        iColorCount+=15;
		}
    //
    // When the text is white, wait for iPostCount Tick before switching
    // to main state
    //
    else if(iPostCount>0)
		{
        iPostCount--;
		}
	else
		{
	    SetState(CSplashContainer::EMain);
	    StopTimer();
		}
	return ETrue;
	}


// ---------------------------------------------------------
// CSplashContainer::StartTimer() 
// Start the timer (required for animated SplashScreen)
// Optional but useful for static ones.
// ---------------------------------------------------------
//
void CSplashContainer::StartTimer()
	{
	//If the timer is not already running, start it
	if (!iPeriodicTimer->IsActive())
		{
		iPeriodicTimer->Start(iTick,iTick,TCallBack(CSplashContainer::Period,this));
		}
	}

// ---------------------------------------------------------
// CSplashContainer::StopTimer() 
// 
// ---------------------------------------------------------
//
void CSplashContainer::StopTimer()
	{
	//Stop the timer if it is active
	if (iPeriodicTimer->IsActive())
		{
		iPeriodicTimer->Cancel();
		}
	}

// ---------------------------------------------------------
// CSonarBlueView::SetAppUi(CSonarBlueAppUi* aAppUi)
// ?implementation_description
// ---------------------------------------------------------
//
void CSplashContainer::SetView(CSplashView* aSplashView)
	{
	iSplashView = aSplashView;
	}

// End of File  
