/*
* ============================================================================
*  Name     : CTOPGUNDocument from TOPGUNDocument.h
*  Part of  : TOPGUN
*  Created  : 5/9/2004 by pawel@wapice.com
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  :
*  Copyright: P&P
* ============================================================================
*/

// INCLUDE FILES
#include "TOPGUNDocument.h"
#include "TOPGUNAppUi.h"
#include "HighScore.h"
#include "GameSettings.h"

// ================= MEMBER FUNCTIONS =======================

// constructor
CTOPGUNDocument::CTOPGUNDocument(CEikApplication& aApp)
: CAknDocument(aApp)    
    {
    }

// destructor
CTOPGUNDocument::~CTOPGUNDocument()
    {
	iGameSettings.ResetAndDestroy();
	iHighScoreList.ResetAndDestroy();
    }

// EPOC default constructor can leave.
void CTOPGUNDocument::ConstructL()
    {
    }

// Two-phased constructor.
CTOPGUNDocument* CTOPGUNDocument::NewL(
        CEikApplication& aApp)     // CTOPGUNApp reference
    {
    CTOPGUNDocument* self = new (ELeave) CTOPGUNDocument( aApp );
    CleanupStack::PushL( self );
    self->ConstructL();
    CleanupStack::Pop();

    return self;
    }
    
// ----------------------------------------------------
// CTOPGUNDocument::CreateAppUiL()
// constructs CTOPGUNAppUi
// ----------------------------------------------------
//
CEikAppUi* CTOPGUNDocument::CreateAppUiL()
    {
    return new (ELeave) CTOPGUNAppUi;
    }

// ----------------------------------------------------
// CTOPGUNDocument::OpenFileL
// Overrides CAknDocument::OpenFileL to support document file
// ----------------------------------------------------
//
CFileStore* CTOPGUNDocument::OpenFileL(TBool aDoOpen,const TDesC& aFilename,RFs& aFs)
    {
    return CEikDocument::OpenFileL(aDoOpen, aFilename, aFs);
    }

// ----------------------------------------------------
// CTOPGUNDocument::RestoreL()
// restore data from persistent store
// ----------------------------------------------------
//      
void CTOPGUNDocument::RestoreL(const CStreamStore& aStore, const CStreamDictionary& aStreamDic)
    {
	TStreamId id = aStreamDic.At(Application()->AppDllUid());
	RStoreReadStream stream;
	stream.OpenLC(aStore, id );
    TInt count = stream.ReadInt16L();
    //restore high score
	for (TInt index = 0; index < count; ++index)
        {
        CHighScoreItem* item = CHighScoreItem::NewL();
	    CleanupStack::PushL(item);
        item->InternalizeL(stream);
		
		User::LeaveIfError(iHighScoreList.Append(item));
	    CleanupStack::Pop(item);
        }

	//restore game settings
	CGameSettings* settings = CGameSettings::NewL();
	CleanupStack::PushL(settings);
    settings->InternalizeL(stream);
	
	User::LeaveIfError(iGameSettings.Insert(settings,0));
	CleanupStack::Pop(settings);
	CleanupStack::PopAndDestroy();  // stream
    }

// ----------------------------------------------------
// CTOPGUNDocument::StoreL()
// store data to persistent store
// ----------------------------------------------------
//          
void CTOPGUNDocument::StoreL(CStreamStore& aStore, CStreamDictionary& aStreamDic) const
	{
	RStoreWriteStream stream;

	TStreamId id = stream.CreateLC(aStore);

	TInt count = MAX_HS_ENTRIES; //only five High Scores entries

    stream.WriteInt16L(static_cast<TInt16>(count));

	//store high scores
    for (TInt index = 0; index < iHighScoreList.Count(); ++index)
        {
		(static_cast<CHighScoreItem*>(iHighScoreList[index]))->ExternalizeL(stream);
        }
	
	//store game settings
	index = 0;
	if (iGameSettings.Count())
		{
		(static_cast<CGameSettings*>(iGameSettings[index]))->ExternalizeL(stream);
		}

	stream.CommitL();

	aStreamDic.AssignL(Application()->AppDllUid(), id);
	CleanupStack::PopAndDestroy(); // stream
	}

void CTOPGUNDocument::InsertHighScoreItemL(CHighScoreItem* aItem, TInt aIndex)
	{
	User::LeaveIfError( iHighScoreList.Insert( aItem, aIndex)  );
	}

void CTOPGUNDocument::SetGameSettingsL(CGameSettings* aSettings, TInt aIndex)
	{
	User::LeaveIfError( iGameSettings.Insert( aSettings, aIndex)  );
	}

void CTOPGUNDocument::RemoveHS(TInt aIndex)
	{
	CHighScoreItem* item = iHighScoreList[aIndex];
	delete item;
	iHighScoreList.Remove(aIndex);
	}

CHighScoreItem* CTOPGUNDocument::HighScoreItem(TInt aIndex)
	{
	CHighScoreItem* item;
	if (iHighScoreList.Count() == 0)
		{
		item = NULL;
		}
	else
		{
		item = static_cast<CHighScoreItem*> (iHighScoreList[aIndex]);
		}
	return item;
	}

CGameSettings* CTOPGUNDocument::GameSettings(TInt aIndex)
	{
	CGameSettings* item;
	if (iGameSettings.Count() == 0)
		{
		item = NULL;
		}
	else
		{
		item = static_cast<CGameSettings*> (iGameSettings[aIndex]);
		}
	return item;
	}

void CTOPGUNDocument::SortHighScoreList()
	{
	//CGameSettings *gs = CGameSettings::NewL();
	//gs = GameSettings(0);

	TLinearOrder<CHighScoreItem> order(CHighScoreItem::CompareTop);
	iHighScoreList.Sort(order);

	//SetGameSettingsL(gs,0);
	}

TBool CTOPGUNDocument::CheckHighScore(const TUint aHighScore)
	{
	TBool addToHSList = EFalse;
	
	SortHighScoreList();
	
	//take last entry in the list
	CHighScoreItem* lastHS = HighScoreItem(MAX_HS_ENTRIES - 1); 

	if (aHighScore > lastHS->HighScore())
		{
		addToHSList = ETrue;
		}

	return addToHSList;	
	}

// End of File  
