/*
* ============================================================================
*  Name     : CTOPGUNContainer from TOPGUNContainer.h
*  Part of  : TOPGUN
*  Created  : 5/9/2004 by pawel@wapice.com
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  : 1.0
*  Copyright: IlPadriono group.
* ============================================================================
*/

// INCLUDE FILES
//system
#include <eikenv.h> 
//bitmaps
#include <topgun.mbg>
// for double screen buffering  
#include <fbs.h>	
#include <bitdev.h>
#include <bitstd.h>
// for fonts
#include <gdi.h> 
#include <aknutils.h>
//commands
#include <TOPGUN.rsg>
#include "topgun.hrh"
//user
#include "bitmapmethods.h"
#include "TOPGUNContainer.h"
#include "TOPGUNView.h"
//sound
#include "CSndMixer.h"
#include "CWavLoader.h" 

//CONSTANTS
_LIT (KMultiBitmapFilename,"z:\\resource\\apps\\topgun.mbm"); 
// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CTOPGUNContainer::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CTOPGUNContainer::ConstructL(const TRect& aRect,
								  CSndMixer* aSndMixer,
								  TSample& aMusicSample,
								  TSample& aSelectSample,
								  TSample& aButtonSample,
								  TInt aAudioVol,
								  TInt aSfxVol)
    {
	iSndMixer = aSndMixer;
	iMusicSample = aMusicSample;
	iSelectSample = aSelectSample;
	iButtonSample = aButtonSample;
	iAudioVol = aAudioVol;
	iSfxVol = aSfxVol;
	iSndMixer->Resume();
	//iSndMixer->Play( iMusicSample, 1, 11025, iAudioVol );
	iSndMixer->Play( iMusicSample, 1, 22050, iAudioVol );

	//initial settings of the screen
	iSelectPos = 0;

    CreateWindowL();
	SetRect(aRect);

	iBackgroundImage = iEikonEnv->CreateBitmapL(KMultiBitmapFilename,EMbmTopgunMainmenu);	
	// Create the off screen bitmap and device / gc
    iOffScreenBitmap       = NBitmapMethods::CreateBitmapL(Rect().Size(),KColourDepth);
    iOffScreenBitmapDevice = NBitmapMethods::CreateBitmapDeviceL(*iOffScreenBitmap);
    iOffScreenBitmapGc     = NBitmapMethods::CreateGraphicsContextL(*iOffScreenBitmapDevice);
    ActivateL();
    }

// Destructor
CTOPGUNContainer::~CTOPGUNContainer()
    {
	//iSndMixer->Stop(1);
	//iSndMixer->Stop(2);
	//iSndMixer->Stop(3);
	//iSndMixer->Stop(4);
	//iSndMixer->Pause();

	if (iOffScreenBitmapGc)
		{
		delete iOffScreenBitmapGc;
		iOffScreenBitmapGc = NULL;
		}

	if (iOffScreenBitmapDevice)
		{
		delete iOffScreenBitmapDevice;
		iOffScreenBitmapDevice = NULL;
		}	
	
	if (iOffScreenBitmap)
		{
		delete iOffScreenBitmap;
		iOffScreenBitmap = NULL;
		}

	if (iBackgroundImage)
		{
		delete iBackgroundImage;
		iBackgroundImage = NULL;
		}
    }

/*
// ---------------------------------------------------------
// CTOPGUNContainer::TimerCallBack( TAny* aPtr )
// 
// ---------------------------------------------------------
//
TInt CTOPGUNContainer::TimerCallBack( TAny* aPtr )
	{
	return ((CTOPGUNContainer*)aPtr)->Dummy(); 
	}
*/

/*
//---------------------------------------------------------
// CTOPGUNContainer::Dummy(  )
// 
// ---------------------------------------------------------
//
TInt CTOPGUNContainer::Dummy()
	{
	return ETrue;
	}
*/

// ---------------------------------------------------------
// CTOPGUNContainer::HandleGainingForeground()
// 
// ---------------------------------------------------------
//
/*
void CTOPGUNContainer::HandleGainingForeground()
	{
	// application gets focused
	// this function is called first time when application starts
	// that's why there's no need to start timer and sound in constructor

	//iTimer->Start( 10000, 10000, TCallBack( TimerCallBack, this ) );
	iSndMixer->Resume();
	}
*/
// ---------------------------------------------------------
// CTOPGUNContainer::HandleLosingForeground()
// 
// ---------------------------------------------------------
//
/*
void CTOPGUNContainer::HandleLosingForeground()
	{
	// application loses focus
	// so stop moving blocks and playing sound

	//iTimer->Cancel();
	iSndMixer->Pause();
	}
*/
/*
// ---------------------------------------------------------
// CTOPGUNContainer::HandleLosingForeground()
// 
// ---------------------------------------------------------
//
void CTOPGUNContainer::StartMixer()
	{
	//iSndMixer->Resume();
	}

// ---------------------------------------------------------
// CSoundMixerContainer::HandleLosingForeground()
// 
// ---------------------------------------------------------
//
void CTOPGUNContainer::StopMixer()
	{
	iSndMixer->Pause();
	}
*/

// ---------------------------------------------------------
// CTOPGUNContainer::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CTOPGUNContainer::SizeChanged()
    {
    // TODO: Add here control resize code etc.
    }

// ---------------------------------------------------------
// CTOPGUNContainer::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CTOPGUNContainer::CountComponentControls() const
    {
    return 0; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CTOPGUNContainer::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CTOPGUNContainer::ComponentControl(TInt /*aIndex*/) const
    {
	return NULL;
    }

// ---------------------------------------------------------
// CTOPGUNContainer::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CTOPGUNContainer::Draw(const TRect& /*aRect*/) const
    {
    //SystemGc().Clear(Rect());
	iOffScreenBitmapGc->BitBlt(TPoint(0,0),iBackgroundImage);
	DrawCaptions();
	SystemGc().BitBlt(Rect().iTl,iOffScreenBitmap);
    }

// ---------------------------------------------------------
// CTOPGUNContainer::::DrawCaptions() const
// ---------------------------------------------------------
//
void CTOPGUNContainer::DrawCaptions() const
    {
	CFont* font = (CFont*)LatinPlain12(); //font for scale
	iOffScreenBitmapGc->UseFont(font);


	//TRgb active(165,2,9);
	//TRgb inactive(36,35,36);

	TRgb active(0,0,0);
	TRgb inactive(111,110,108);

	TPoint singlePos(48,120);
	TPoint multiPos(43,134);
	TPoint optionsPos(55,148);
	TPoint exitPos(68,162);


	switch ( iSelectPos )
		{
		case 0:
			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			iOffScreenBitmapGc->DrawText(_L(" n e w  g a m e "), singlePos);
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			iOffScreenBitmapGc->DrawText(_L(" h i g h  s c o r e "), multiPos);
			iOffScreenBitmapGc->DrawText(_L(" o p t i o n s "), optionsPos);
			iOffScreenBitmapGc->DrawText(_L(" e x i t "), exitPos);
			break;
		case 1:
			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			iOffScreenBitmapGc->DrawText(_L(" h i g h  s c o r e "), multiPos);
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			iOffScreenBitmapGc->DrawText(_L(" n e w  g a m e "), singlePos);
			iOffScreenBitmapGc->DrawText(_L(" o p t i o n s "), optionsPos);
			iOffScreenBitmapGc->DrawText(_L(" e x i t "), exitPos);
			break;
		case 2:
			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			iOffScreenBitmapGc->DrawText(_L(" o p t i o n s "), optionsPos);
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			iOffScreenBitmapGc->DrawText(_L(" n e w  g a m e "), singlePos);
			iOffScreenBitmapGc->DrawText(_L(" h i g h  s c o r e "), multiPos);
			iOffScreenBitmapGc->DrawText(_L(" e x i t "), exitPos);
			break;
		case 3:
			iOffScreenBitmapGc->SetPenColor(active);
			iOffScreenBitmapGc->SetBrushColor(active);
			iOffScreenBitmapGc->DrawText(_L(" e x i t "), exitPos);
			iOffScreenBitmapGc->SetPenColor(inactive);
			iOffScreenBitmapGc->SetBrushColor(inactive);
			iOffScreenBitmapGc->DrawText(_L(" n e w  g a m e "), singlePos);
			iOffScreenBitmapGc->DrawText(_L(" h i g h  s c o r e "), multiPos);
			iOffScreenBitmapGc->DrawText(_L(" o p t i o n s "), optionsPos);
			break;
		}
	iOffScreenBitmapGc->DiscardFont();
    }


// ---------------------------------------------------------
// CTOPGUNContainer::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CTOPGUNContainer::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }
// ---------------------------------------------------------
// CTOPGUNContainer::OfferKeyEventL(
//				     const TKeyEvent& aKeyEvent, TEventCode aType)
// ---------------------------------------------------------
//
TKeyResponse CTOPGUNContainer::OfferKeyEventL(const TKeyEvent& aKeyEvent, TEventCode /*aType*/)
    {
	switch ( aKeyEvent.iCode )
		{
		case EKeyUpArrow:
			iSndMixer->Play( iButtonSample, 2, 11025, iSfxVol );
			MoveUp();
			return EKeyWasConsumed;
			break;
		
		case EKeyDownArrow:
			iSndMixer->Play( iButtonSample, 2, 11025, iSfxVol );
			MoveDown();
			return EKeyWasConsumed;
			break;

		case 0x0000f842:
			iView->HandleCommandL(EEikCmdExit);
			return EKeyWasConsumed;
			break;
		
		case 0x0000f843:
		case EKeyEnter:
		case EKeyOK:
			{
		//iSndMixer->Play( iSelectSample, 3, 11025, iSfxVol );
		switch ( iSelectPos )
			{
			case 0:
			    //iView->HandleCommandL(EStartGame);
				
				iView->SwitchView(9); //Mission objectives screen
				break;
			case 1:
				iView->SwitchView(10); //Mission objectives screen
				break;
			case 2:
				iView->SwitchView(4); //Options screen
				break;
			case 3:
				iView->HandleCommandL(EEikCmdExit);
				break;
			default:
				break;
			}
			return EKeyWasConsumed;
			break;
		
		default:
			return EKeyWasNotConsumed;
			break;
			}	
		}
    }

void CTOPGUNContainer::MoveUp()
	{
	if (iSelectPos >= 1)
		{
		iSelectPos--;
		DrawNow();
		}
	}

void CTOPGUNContainer::MoveDown()
	{
	if (iSelectPos < 3)
		{
		iSelectPos++;
		DrawNow();
		}
	}

void CTOPGUNContainer::SetView(CTOPGUNView* aView)
	{
	iView = aView;
	}

// End of File  
