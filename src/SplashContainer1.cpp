/*
* ============================================================================
*  Name     : CSplashContainer1 from SplashContainer1.h
*  Part of  : Splash
*  Created  : IlPadriono group
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  : 1.0
*  Copyright: IlPadrino group.
* ============================================================================
*/

// INCLUDE FILES
#include "SplashContainer1.h"
#include "SplashView1.h"
// for fonts
#include <aknutils.h>  
//bitmaps
#include <topgun.mbg>
// for double screen buffering  
#include <fbs.h>	
#include <bitdev.h>
#include <bitstd.h>
#include "bitmapmethods.h" 

//CONSTANTS
_LIT (KMultiBitmapFilename,"z:\\resource\\apps\\topgun.mbm"); 
// ================= MEMBER FUNCTIONS =======================

// ---------------------------------------------------------
// CSplashContainer1::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CSplashContainer1::ConstructL(const TRect& aRect)
	{
	// Create and activate the main window
    //
    CreateWindowL();
    SetRect(aRect);

	iBackgroundImage = iEikonEnv->CreateBitmapL(KMultiBitmapFilename,EMbmTopgunTimesofwar);	
	// Create the off screen bitmap and device / gc
    iOffScreenBitmap       = NBitmapMethods::CreateBitmapL(Rect().Size(),KColourDepth);
    iOffScreenBitmapDevice = NBitmapMethods::CreateBitmapDeviceL(*iOffScreenBitmap);
    iOffScreenBitmapGc     = NBitmapMethods::CreateGraphicsContextL(*iOffScreenBitmapDevice);

    // Create a periodic timer but don't start it yet
    iPeriodicTimer = CPeriodic::NewL(CActive::EPriorityStandard);

    ActivateL();

    // 
    // Initialise mode to Splash.
    // The iTick value is set to three seconds by default. This is enough for a
    // fixed screen but will not allow animation unless you redefine the tick value
    // using SetTimerTick()
	iState=CSplashContainer1::ESplash;
    iTick = 24000000;
	    //
   
    //
    // Create the SplashScreen
    // Set the refresh rate of the screen to 1000 micro-seconds 
    //
    //CSplashContainer1::ConstructL(aRect);
    SetTimerTick(10000);

    //
    // Configure some internal counters that are used for displaying
    // the splash screen (app specific) - not par or the CSplashContainer1
    // 
    // iPreCount is the duration (in Ticks, 1 ticks = 1000 micro-sec according to
    //           previous initialisation) of the "black screen" before the text
    //           starts to appear
    // iColorCount is the value that shall be used for each R,G and B component of
    //           displayed text color
    // iPostCount is the duration (in Ticks) of display of the splash screen after
    //           the animation
    iPreCount  =10;
    iColorCount=0;
    iPostCount =20;

    //
    // Activate the splashscreen animation
    //
	StartTimer();

	//iSndMixer = aSndMixer;
	//iEnterSample = aEnterSample;
	//iAudioVol = aAudioVol;
	//iSfxVol = aSfxVol;

	/*
	CWavLoader* wavLoader = CWavLoader::NewLC();

	iEnterSample = wavLoader->LoadL(_L("enter.wav") ); //chanel 1

	CleanupStack::PopAndDestroy( wavLoader );
	*/
	//iSndMixer->Play( iEnterSample, 1, 11025, iAudioVol );
	//iSndMixer->Resume();
	}

// Destructor
CSplashContainer1::~CSplashContainer1()
	{
	if (iOffScreenBitmapGc)
		{
		delete iOffScreenBitmapGc;
		iOffScreenBitmapGc = NULL;
		}

	if (iOffScreenBitmapDevice)
		{
		delete iOffScreenBitmapDevice;
		iOffScreenBitmapDevice = NULL;
		}	
	
	if (iOffScreenBitmap)
		{
		delete iOffScreenBitmap;
		iOffScreenBitmap = NULL;
		}

	if (iBackgroundImage)
		{
		delete iBackgroundImage;
		iBackgroundImage = NULL;
		}
	
    StopTimer();
	delete iPeriodicTimer;
	iPeriodicTimer = NULL;
	}

// ---------------------------------------------------------
// CSplashContainer1::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CSplashContainer1::SizeChanged()
    {
    }

// ---------------------------------------------------------
// CSplashContainer1::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CSplashContainer1::CountComponentControls() const
    {
    return 0; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CSplashContainer1::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CSplashContainer1::ComponentControl(TInt /*aIndex*/) const
    {
    return NULL;
    }

// ---------------------------------------------------------
// CSplashContainer1::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CSplashContainer1::Draw(const TRect& /*aRect*/) const
	{
    //
    // Call the appropriate Draw function depending of the current mode
    // (Each Draw function is a non-pure virtual function). If it is not
    // defined by the child class, there won't be any error but nothing 
    // will be drawn.
    //
	switch(iState)
		{	
    case CSplashContainer1::ESplash:
        DrawSplash();
        break;
    case CSplashContainer1::EMain:
        DrawMain();
		iSplashView->SwitchView();
        break;
    case CSplashContainer1::EExiting:
        DrawExiting();
        break;
		}
	SystemGc().BitBlt(Rect().iTl,iOffScreenBitmap);
	}

// ---------------------------------------------------------
// CSonarBlueContainer2::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CSplashContainer1::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {
    // TODO: Add your control event handler code here
    }


void CSplashContainer1::DrawSplash(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	iOffScreenBitmapGc->BitBlt(TPoint(0,0),iBackgroundImage);
	}

void CSplashContainer1::DrawMain(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	iOffScreenBitmapGc->SetPenStyle(CGraphicsContext::ENullPen);
    iOffScreenBitmapGc->SetBrushStyle(CGraphicsContext::ESolidBrush);
    iOffScreenBitmapGc->SetBrushColor(KRgbBlack);
    iOffScreenBitmapGc->DrawRect(Rect());
	}

void CSplashContainer1::DrawExiting(/*CGraphicsContext* bitmapContext, const TRect& /*aRect*/) const
	{
	}


// ---------------------------------------------------------
// CSplashContainer1::SetState(CSplashContainer1::TState aState) 
// Change the mode of the container (possible values are
// ESplash, EMain, EExiting)
// ---------------------------------------------------------
//
void CSplashContainer1::SetState(CSplashContainer1::TState aState)
	{
	iState=aState;
	}

// ---------------------------------------------------------
// CSplashContainer1::State() 
// Get the current mode. 
// ---------------------------------------------------------
//
CSplashContainer1::TState CSplashContainer1::State()
	{
	return iState;
	}

// ---------------------------------------------------------
// CSplashContainer1::SetTimerTick(TTimeIntervalMicroSeconds32  aTick) 
// Set the Tick value (duration between two screen redraw)
// ---------------------------------------------------------
//
void CSplashContainer1::SetTimerTick(TTimeIntervalMicroSeconds32  aTick)
	{
	iTick=aTick;
	}


// ---------------------------------------------------------
// CSplashContainer1::DoPeriod() 
// Function that is called periodically by the timer.
// Call the child Tick() treatment and request a screen 
// redraw if needed.
// ---------------------------------------------------------
//
void CSplashContainer1::DoPeriod()
	{
    if (Tick())
		{
		// Update the screen
	    CWindowGc& gc = SystemGc();
	    gc.Activate(*DrawableWindow());
	    Draw(Rect());
	    gc.Deactivate();
		}
	}

// This function is called by the periodic timer
TInt CSplashContainer1::Period(TAny * aPtr)
	{
    ((CSplashContainer1*)aPtr)->DoPeriod();
    //returning a value of TRUE indicates the callback should be done again
	return TRUE;
	}	

// Default treatment for a Tick: do nothing!
// (this is a virtual function that should be defined in child class)
TBool CSplashContainer1::Tick()
		{
	 //
    // Start by precount
    // (during precount iColorCount is zero, so splash text will be displayed
    // in black and then not visible)
    if(iPreCount>0)
		{
        iPreCount--;
		}
    //
    // After PreCount, fade the text to white with a 15 increment.
    //
    else if(iColorCount<255) 
		{
        iColorCount+=15;
		}
    //
    // When the text is white, wait for iPostCount Tick before switching
    // to main state
    //
    else if(iPostCount>0)
		{
        iPostCount--;
		}
	else
		{
	    SetState(CSplashContainer1::EMain);
	    StopTimer();
		}
	return ETrue;
	}


// ---------------------------------------------------------
// CSplashContainer1::StartTimer() 
// Start the timer (required for animated SplashScreen)
// Optional but useful for static ones.
// ---------------------------------------------------------
//
void CSplashContainer1::StartTimer()
	{
	if(!iPeriodicTimer)
		return;
	//If the timer is not already running, start it
	if (!iPeriodicTimer->IsActive())
		{
		iPeriodicTimer->Start(iTick,iTick,TCallBack(CSplashContainer1::Period,this));
		}
	}

// ---------------------------------------------------------
// CSplashContainer1::StopTimer() 
// 
// ---------------------------------------------------------
//
void CSplashContainer1::StopTimer()
	{
	if(!iPeriodicTimer)
		return;
	//Stop the timer if it is active
	if (iPeriodicTimer->IsActive())
		{
		iPeriodicTimer->Cancel();
		}
	}

// ---------------------------------------------------------
// CSonarBlueView::SetAppUi(CSonarBlueAppUi* aAppUi)
// ?implementation_description
// ---------------------------------------------------------
//
void CSplashContainer1::SetView(CSplashView1* aSplashView)
	{
	iSplashView = aSplashView;
	}

// End of File  
